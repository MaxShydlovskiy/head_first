Глава 1 Как сделать больше меньшими усилиями

\n    =>  New string
\t    =>  Tabulation
\"    =>  Double quotes
\'    =>  Single quote
\\    =>  BackSlash

to_s  =>  string
to_i  =>  fixnum
to_f  =>  float

 Ruby — интерпретируемый язык.
  Код Ruby не нужно компилировать перед выполнением.

 Переменные не нужно объявлять перед при-
  сваиванием им значений. Также не нужно
  указывать тип переменной.

 Ruby рассматривает все символы от # до кон-
  ца строки как комментарий и игнорирует их.

 Текст, заключенный в кавычки, рассматрива-
  ется как строка, то есть последовательность символов.

 Если в строку Ruby входит конструкция
  #{...}, то выражение в фигурных скобках
  интерполируется (подставляется) в строку.

 При вызове методов могут передаваться
  аргументы, разделенные запятыми.

 Заключать список аргументов в круглые скобки
  не обязательно. Если аргументы отсутствуют,
  не ставьте пустые круглые скобки.

 Используйте методы inspect и p для про-
  смотра отладочной информации по объектам Ruby.

 Для включения специальных символов в стро-
  ки, заключенные в двойные кавычки, использу-
  ются служебные последовательности (такие, как \n и \t).

 Интерактивный интерпретатор Ruby (или irb)
  позволяет быстро проверить результаты вы-
  ражений Ruby.

 Вызов метода to_s для (почти) любого объ-
  екта возвращает строковое представление объекта.
  Вызов to_i для строки преобразует ee в целое число.

 unless — противоположность if; код
  выполняется в том случае, если условие
  ложно.

 until — противоположность while; цикл
  выполняется многократно, пока условие
  не станет истинным.
Команды
Условные команды выполняют содержащийся в них
код в зависи-мости от некоторого условия.

Циклы выполняют содержащий-ся в них код многократно.
Цикл прерывается по некоторому условию.


Глава 2 Методы и классы

Имена методов следует записывать
в «змеином» стиле: одно или несколь­ко
слов в нижнем регистре, разделен­ных
подчеркиваниями (как в именах переменных).

def bark
end

def wag_tail
end


Как и при вызове методов, не ставьте
круглые скобки в определении метода
при отсутствии параметров.
Пожалуй­ста, не делайте так (притом что эта
запись формально допустима):

def no_args()
  puts "Bad Rubyist!"
end

Ho если параметры передаются,
круг­лые скобки ставятся всегда.
(B гла­ве 1 упоминались исключения,
отно­сящиеся к вызову методов,
но при объявлении методов исключений не бывает.)
Формально круглые скобки можно опустить,
но мы еще раз гово­рим: не надо так делать.

def with_args first,
  second   puts "No! Bad!"
end


B: Чем аргументы отличаются от па-
раметров?

O: Параметры определяются и используются в определении метода.
Аргументы передаются при вызове метода.

Программисты, работающие на Ruby,
обычно предпочитают неявные возвращаемые значе­ния.
B коротком методе нет смысла использовать запись:

def area(length, width)
  return length * width
end

...когда можно просто написать:

def area(length, width)
  length * width
end

Имена классов Ruby долж­ны начинаться c буквы верхнего регистра.
Bce символы после первого за­писываются в нижнем ре­гистре.
class Appointment
  ...
end

Если имя состоит из не­скольких слов, каждое слово тоже должно начи­наться
c буквы верхнего регистра.

class AddressBook
  ...
end

class PhoneNumber
  ...
end

Помните схему записи имен переменных
(c раз­делением слов символами подчеркивания),
которая называлась «змеиной» записью?
Стиль записи имен классов называется «верблюжьим»,
потому что буквы верхнего регистра напоминают горбы вер­блюда.

Альтернативный способ вы­зова методов записи
атрибу­та приводится только для того, чтобы вы поняли,
что происходит «за кулисами».
B настоящих программах на языке Ruby
следует исполь­зовать только синтаксис c присваиванием!

Имя метода чтения атрибута обыч­но совпадает c именем переменной экземпляра,
из которой читается значение (конечно, без символа @).

def tail_length
  @tail_length
end

To же относится к именам методов записи атрибута,
но в конец имени добавляется символ =.
def tail_length=(value)
  @tail_length = value
end



attr_writer :name
def name=(new_value)
  @name = new_value
end

attr_reader :name
def name
  @name
end

attr_accessor :name
def name=(new_value)
  @name = new_value
end

def name
  @name
end




 Тело метода состоит из одной или не-скольких команд Ruby,
  выполняемых при вызове метода.

 Круглые скобки не указываются в определении метода в том
  (и только в том) случае, если в методе не определяется ни один параметр.

 Если возвращаемое значение не указа-но явно,
  то метод возвращает значение последнего вычисленного выражения.

 Определения методов в определении класса рассматриваются
  как методы экземпляра этого класса.

 3a пределами определения класса к переменным экземпляра
  можно обращаться только через методы доступа.

 Вызовы методов attr_writer, attr_ reader и attr_accessor
  в определении класса обеспечивают сокращенную запись
  для определения методов доступа.

 Методы доступа могут использоваться для проверки действительности
  данных перед их сохранением в перемен-ных экземпляра.

 Метод raise предназначен для вы-вода сообщений o6 ошибках в программе.


